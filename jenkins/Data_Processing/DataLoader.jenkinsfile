pipeline {
	
  agent {

		node {
			label 'slave-ncias-d2320-c'
		}

  }

	parameters {
    gitParameter(branchFilter: 'origin/(.*)', 
        defaultValue: 'master', 
        name: 'Data_Loader_Branch', 
        type: 'PT_BRANCH_TAG',
        quickFilterEnabled: true, 
        selectedValue: 'DEFAULT', 
        sortMode: 'ASCENDING_SMART', 
        tagFilter: '*', 
        useRepository: 'https://github.com/CBIIT/icdc-dataloader')
    
    gitParameter(branchFilter: 'origin/(.*)', 
        defaultValue: 'master', 
        name: 'Model_Branch', 
        type: 'PT_BRANCH_TAG',
        quickFilterEnabled: true, 
        selectedValue: 'DEFAULT', 
        sortMode: 'ASCENDING_SMART', 
        tagFilter: '*', 
        useRepository: 'https://github.com/CBIIT/icdc-model-tool')
    
    extendedChoice( 
        name: 'Environment', 
        defaultValue: 'dev', 
        description: 'Choose the environment to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'dev,qa,stage,prod' )

    string(defaultValue: "", 
        description: 'S3 Folder to load data from', 
        name: 'S3_Folder')

    extendedChoice( 
        defaultValue: 'no', 
        name: 'Wipe_DB', 
        description: 'Choose yes to wipe DB',
        quoteValue: false,
        multiSelectDelimiter: ',',
        value: 'no,yes',
        type: 'PT_RADIO')

    extendedChoice( 
        defaultValue: 'no', 
        name: 'Cheat_Mode', 
        description: 'Bypass Data Validation',
        quoteValue: false,
        multiSelectDelimiter: ',',
        value: 'no,yes',
        type: 'PT_RADIO')

    extendedChoice( 
        defaultValue: 'false', 
        name: 'Split_Transactions', 
        description: 'Choose true to the Split Transactions',
        quoteValue: false,
        multiSelectDelimiter: ',',
        value: 'false,true',
        type: 'PT_SINGLE_SELECT')

	  booleanParam(
		    defaultValue: true,
		    description: 'Flush the Redis cache',
		    name: 'Flush_Redis')		
  }
  
  environment {
  	
    DATALOADER_BRANCH = "${params.Data_Loader_Branch}"
    MODEL_BRANCH      = "${params.Model_Branch}"
    S3_FOLDER         = "${params.S3_Folder}"
    TIER              = "${params.Environment}"
    WIPE_DB           = "${params.Wipe_DB}"
    CHEAT_MODE        = "${params.Cheat_Mode}"
    SPLIT             = "${params.Split_Transactions}"

  }

  stages{

  	stage('checkout'){
  		steps {

  		  checkout([$class: 'GitSCM',
			    branches: [[name: "${env.DATALOADER_BRANCH}"]],
          extensions: [[$class: 'SubmoduleOption', 
          recursiveSubmodules: true]],
          userRemoteConfigs:
          [[url: "https://github.com/CBIIT/icdc-dataloader"]]])

        checkout([$class: 'GitSCM',
          branches: [[name: "${env.MODEL_BRANCH}"]],
          extensions: [[$class: 'SubmoduleOption', 
          recursiveSubmodules: true],
          [$class: 'RelativeTargetDirectory',
          relativeTargetDir: "icdc-model"]],
          userRemoteConfigs:
          [[url: "https://github.com/CBIIT/icdc-model-tool"]]])

        checkout([$class: 'GitSCM',
          //branches: [[name: "main"]],
          branches: [[name: "redis_update"]],
          extensions: [[$class: 'SubmoduleOption', 
          recursiveSubmodules: true],
          [$class: 'RelativeTargetDirectory',
          relativeTargetDir: "icdc-deployments"]],
          userRemoteConfigs:
          [[url: "https://github.com/CBIIT/icdc-deployments"]]])

  		}
  	}

  	stage('load-data'){
      steps {

        wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
          ansiblePlaybook( 
            playbook: '${WORKSPACE}/icdc-deployments/ansible/playbooks/icdc-data-loader.yml',
            inventory: '${WORKSPACE}/icdc-deployments/ansible/playbooks/hosts',
            extraVars: [
                            
            ],
            credentialsId: 'commonsdocker',
            colorized: true
          )
        }

      }
    }
	
    stage('clear redis cache'){
      when {
        allOf {

          not { expression { params.Environment == 'stage' } }
          not { expression { params.Environment == 'prod' } }
          expression { params.Flush_Redis }
            
        }

      }

      steps{
          
        wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
        
          script {
            sh label: 'database-hosts', script: '''#!/bin/bash
              echo "Creating inventory file"
              echo "[icdc]" > ${WORKSPACE}/icdc-devops/ansible/hosts
              echo ${NEO4J_IP} >> ${WORKSPACE}/icdc-devops/ansible/hosts
              '''
          }
        
          ansiblePlaybook( 
            playbook: '${WORKSPACE}/icdc-devops/ansible/redis_icdc.yml',
            inventory: '${WORKSPACE}/icdc-devops/ansible/hosts',
            credentialsId: 'commonsdocker',
            colorized: true
          )

        }

      }
    }

  }

  post {
   
    cleanup {
	
		  cleanWs()
    
	  }
	
  }

}