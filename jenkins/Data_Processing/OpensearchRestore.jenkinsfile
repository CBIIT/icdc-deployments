import groovy.json.JsonOutput

def getLabelForEnvironment(environment) {
	if (environment == "stage" || environment == "prod"){
		return "commons-docker-ncias-p2790-c"
	}else {
		return "slave-ncias-d2940-c"
	}
}


pipeline {
	agent {
		node {
			label getLabelForEnvironment(params.Environment)
		}
	}

	parameters {
    extendedChoice( 
        name: 'Environment', 
        defaultValue: 'dev2', 
        description: 'Choose the environment to build', 
        type: 'PT_SINGLE_SELECT',
        value: 'dev2' )
    string(defaultValue: "icdc",
                    description: 'snapshot repository name',
                    name: 'PROJECT_NAME')
    string(defaultValue: "icdc",
                    description: 'snapshot repository name',
                    name: 'SNAPSHOT_REPO')
    string(defaultValue: "v1.0.0",
            description: 'Snapshot name used for restore operation',
            name: 'SNAPSHOT_VALUE')
    string(description: 'indices to be loaded to opensearch. values should comma seperated. Only new indices should be loaded',
            name: 'INDICES')
    string(defaultValue: "crdc-nonprod-icdc-opensearch-snapshot-bucket",
            description: 'S3 bucket which has the snapshot to restore',
            name: 'S3_BUCKET')
    string(defaultValue: "",
            description: 'sub folder in S3 bucket where the snapshot is present',
            name: 'BASE_PATH')
  }
  options {
  	ansiColor('xterm')
  }
  tools {
  	maven 'Default' 
    jdk 'Default' 
  }
  environment {
      PROGRAM      = "crdc"
	  PROJECT      = "icdc"
	  SLACK_SECRET = "icdc_slack_url"
	  ENV          = "${params.Environment}"
	  REGION       = "us-east-1"
	  DEPLOY_REPO  = "${env.PROJECT}-deployments"
  }
  stages{

      stage('checkout'){
      steps {
        checkout( poll: false, 
        changelog:false,
        scm: [$class: 'GitSCM', 
        //branches: [[name: '*/main']], 
        branches: [[name: '*/os_snapshot']], 
        doGenerateSubmoduleConfigurations: false, 
        extensions: [[$class: 'DisableRemotePoll'],
        [$class: 'PathRestriction', excludedRegions: '*'], 
        [$class: 'RelativeTargetDirectory', 
        relativeTargetDir: "${env.PROJECT}-deployments"]],
        submoduleCfg: [], 
	    userRemoteConfigs:
		[[url: "https://github.com/CBIIT/${env.DEPLOY_REPO}"]]])
        }
    }

  	stage('opensearch_restore'){
    // agent {
    //         docker {
    //             image 'cbiitssrepo/cicd-ansible_4.0'
    //             args '--net=host -u root -v /var/run/docker.sock:/var/run/docker.sock'
    //             reuseNode true
    //         }
    //     }
 		steps{
          wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]){
             ansiblePlaybook( 
                playbook: '${WORKSPACE}/icdc-deployments/ansible/playbooks/dataloader/opensearchrestore.yml',
                inventory: '${WORKSPACE}/icdc-deployments/ansible/playbooks/hosts',
                extraVars: [
                    tier: "${ENV}",
                    project_name: "${PROJECT}",
                    snapshot_repo: "${params.SNAPSHOT_REPO}", 
                    snapshot_value: "${params.SNAPSHOT_VALUE}",
                    base_path: "${params.BASE_PATH}",
                    s3_bucket: "${params.S3_BUCKET}",
                    project: "${PROJECT}",
                    indices: "${params.INDICES}"
                    ],
                  hostKeyChecking: false,
                  colorized: true,
                  extras: '-vvv') 
        }
      }
    }
  }
  post {

    cleanup {

        cleanWs()

    }

  }
}