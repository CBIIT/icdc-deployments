@Library('datacommons-jenkins-shared-library@v1.1') _

pipeline {
	agent {
		node {
			label 'ncias-p2790-c'
		}
	}

	parameters {

        extendedChoice(
            name: 'Environment',
            defaultValue: 'dev',
            description: 'Choose the environment to build',
            type: 'PT_SINGLE_SELECT',
            value: 'dev,qa,stage,prod')

        gitParameter(branchFilter: 'origin/(.*)',
            defaultValue: 'main',
            name: 'FilesBranch',
            type: 'GitParameterDefinition',
            quickFilterEnabled: true,
            selectedValue: 'DEFAULT',
            sortMode: 'ASCENDING_SMART',
            tagFilter: '*',
            useRepository: 'https://github.com/CBIIT/bento-files')

        booleanParam(
            defaultValue: true,
            name: 'UpdateDeploymentVersion')

        booleanParam(
            defaultValue: true,
            name: 'RunDeployStage')

  }

  options {
  	ansiColor('xterm')
	timestamps()
  }

  environment {

      PROJECT    = 'icdc'
      FILES_VERSION = "${params.FilesBranch}"
	  JOB_PATH   = '_default/_lower/ICDC/OneClickDeployment/_jobs'

  }

  stages{
  	stage('checkout'){
  		steps {

		checkout([$class: 'GitSCM',
			branches: [[name: "${params.FilesBranch}"]],
			doGenerateSubmoduleConfigurations: false,
			extensions: [[$class: 'RelativeTargetDirectory',
			relativeTargetDir: "${env.PROJECT}-files"]],
			submoduleCfg: [],
			userRemoteConfigs:
			[[url: 'https://github.com/CBIIT/bento-files']]])

  		sh "cd ${env.PROJECT}-files && git submodule update --init --recursive"
		
		checkout([$class: 'GitSCM',
			branches: [[name: '*/main']],
			doGenerateSubmoduleConfigurations: false,
			extensions: [[$class: 'RelativeTargetDirectory',
			relativeTargetDir: "playbooks"]],
			submoduleCfg: [],
			userRemoteConfigs:
			[[url: 'https://github.com/CBIIT/icdc-deployments']]])

  		checkout([$class: 'GitSCM',
			branches: [[name: "${params.Environment}"]],
			doGenerateSubmoduleConfigurations: false,
			extensions: [[$class: 'RelativeTargetDirectory',
			relativeTargetDir: "${env.PROJECT}-deployments"]],
			submoduleCfg: [],
			userRemoteConfigs:
			[[url: 'https://github.com/CBIIT/icdc-deployments']]])

        }

  	}

  	stage('Build'){

 		steps {
 			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
                ansiblePlaybook(
					playbook: "${WORKSPACE}/playbooks/ansible/playbooks/build-files-microservice.yml", 
            		inventory: "${WORKSPACE}/playbooks/ansible/playbooks/hosts",
                    extraVars: [
						project_name: "${PROJECT}",
						auth_enabled: true
						],
                   colorized: true)
 			}
 		}

  	}

  	stage('Update Deployment Manifest'){

 		steps {
 			
			script {
                if (params.UpdateDeploymentVersion) {
                    writeDeployment(
                        version: "${env.FILES_VERSION}.${BUILD_NUMBER}",
                        image:  "${env.FILES_VERSION}.${BUILD_NUMBER}",
                        service: "files",
                        deploymentFile: "${PROJECT}-deployments/deployments.yaml",
                        deploymentRepoUrl: "https://github.com/CBIIT/${PROJECT}-deployments",
                        deploymentCheckoutDirectory: "${PROJECT}-deployments"
                    )
                }
            }

 		}

  	}

  	stage('Update Code Tag'){

 		steps {
 			
			script {

                tagRepo ( 
                    gitTag: "${params.FilesBranch}",
                    gitUrl: "github.com/CBIIT/bento-files",
                    checkoutDirectory: "${env.PROJECT}-files"
                )

            }

 		}

  	}

  }

  post {

    success {

		script {
			if (params.RunDeployStage) {
				echo 'Run the deployment for this sevice'
				build job: "$JOB_PATH/DeployFiles", parameters: [string(name: 'Files_Tag', value: "${params.FilesBranch}.$BUILD_NUMBER"), extendedChoice(name: 'Environment', value: "${params.Environment}")]
			}
		}
    }

    always {

        notify(
            secretPath: "notification/slack",
            secretName: "icdc_slack_url"
        ) 

    }

    cleanup {

        cleanWs()

    }

  }

}
