@Library('datacommons-jenkins-shared-library@v1.1') _

pipeline {
	agent {
		node {
			label 'icdc-docker'
		}
	}

	parameters {

        extendedChoice(
            name: 'Environment',
            defaultValue: 'dev',
            description: 'Choose the environment to build',
            type: 'PT_SINGLE_SELECT',
            value: 'dev,qa,stage,prod')

        gitParameter(branchFilter: 'origin/(.*)',
            defaultValue: 'main',
            name: 'CodeBranch',
            type: 'GitParameterDefinition',
            quickFilterEnabled: true,
            selectedValue: 'DEFAULT',
            sortMode: 'ASCENDING_SMART',
            tagFilter: '*',
            useRepository: 'https://github.com/CBIIT/bento-icdc-frontend')

        booleanParam(
            defaultValue: true,
            name: 'UpdateDeploymentVersion')

        booleanParam(
            defaultValue: true,
            name: 'RunDeployStage'
        )

  }

  options {
  	ansiColor('xterm')
	timestamps()
  }

  environment {

      PROJECT      = "icdc"
	  SERVICE      = "frontend"
	  ECR_REPO     = "${env.PROJECT}-${env.SERVICE}"
	  DEPLOY_JOB   = "DeployFrontend"
	  SLACK_SECRET = "icdc_slack_url"
	  CODE_REPO    = "bento-${env.PROJECT}-${env.SERVICE}"
	  JOB_PATH     = "_default/_lower/ICDC/_jobs"
	  REGION       = "us-east-1"
	  DEPLOY_REPO  = "${env.PROJECT}-deployments"
      CODE_BRANCH  = "${params.CodeBranch}"
      CODE_FOLDER  = "${env.PROJECT}-${env.SERVICE}"

  }

  stages{
  	stage('checkout'){
  		steps {

		checkout([$class: 'GitSCM',
                        branches: [[name: "${env.CODE_BRANCH}"]],
                        extensions: [[$class: 'SubmoduleOption',
                        recursiveSubmodules: true],
                        [$class: 'RelativeTargetDirectory',
                        relativeTargetDir: "${env.CODE_FOLDER}"]],
                        userRemoteConfigs:
                        [[url: "https://github.com/CBIIT/${env.CODE_REPO}"]]])

  		checkout([$class: 'GitSCM',
                        branches: [[name: "${params.Environment}"]],
                        extensions: [[$class: 'SubmoduleOption',
                        recursiveSubmodules: true],
                        [$class: 'RelativeTargetDirectory',
                        relativeTargetDir: "${env.PROJECT}-deployments"]],
                        userRemoteConfigs:
                        [[url: "https://github.com/CBIIT/${env.DEPLOY_REPO}"]]])

        }

  	}
     stage('Set Environment Variables'){
 		steps {
 			script {
                // set ECR account number
				env.ECR_ACCOUNT = sh(label: 'Get ECR account', returnStdout: true, script: "aws secretsmanager get-secret-value --region $REGION --secret-id ecr --query SecretString --output text | jq -r '.central_account_id'").trim()
				// set repo URL
				env.REGISTRY_URL = "${ECR_ACCOUNT}.dkr.ecr.${REGION}.amazonaws.com"
			}
 		}
        
  	}
  	stage('Build'){

 		steps {

 			script {

			    sh label: 'Docker-Build', script: '''#!/bin/bash

				# build CTDC Docker container
				echo "Building: $ECR_REPO:$CODE_BRANCH.$BUILD_NUMBER"
				aws_account=$(aws sts get-caller-identity --query "Account" --output text)
				repo_url="917011444075.dkr.ecr.us-east-1.amazonaws.com/icdc-frontend"

				cd $WORKSPACE/$CODE_FOLDER && DOCKER_BUILDKIT=1 docker build --no-cache -t $repo_url:$CODE_BRANCH.$BUILD_NUMBER .

				'''

			}

 		}

  	}

  	stage('Test'){

        agent {
            docker {
                image 'cbiitssrepo/cicd-ansible_4.0'
                args '--net=host -u root -v /var/run/docker.sock:/var/run/docker.sock'
                reuseNode true
            }
        }

 		steps {

 			script {

			    sh label: 'Trivy-Test', script: '''#!/bin/bash

				# Test image for vulnerabilities
                echo "Testing Image with Trivy: $ECR_REPO:$CODE_BRANCH.$BUILD_NUMBER"
                aws_account=$(aws sts get-caller-identity --query "Account" --output text)
				repo_url="$REGISTRY_URL/$ECR_REPO"

                #trivy image --exit-code 1 --severity HIGH,CRITICAL $repo_url:$CODE_BRANCH.$BUILD_NUMBER
                trivy image --timeout 15m --severity HIGH,CRITICAL $repo_url:$CODE_BRANCH.$BUILD_NUMBER

				'''

			}

 		}

  	}

  	stage('push to ECR'){

 		steps {

 			script {

			    sh label: 'Docker-Push', script: '''#!/bin/bash

				# push CDS Docker container to ECR
				echo "Pushing: $ECR_REPO:$CODE_BRANCH.$BUILD_NUMBER"
				aws_account=$(aws sts get-caller-identity --query "Account" --output text)
				repo_url="$REGISTRY_URL/$ECR_REPO"

				# login and push to ECR
				docker login -u AWS -p $(aws ecr get-login-password --region $REGION) $repo_url
				docker push $repo_url:$CODE_BRANCH.$BUILD_NUMBER

                # tag as latest and push to ECR
				docker tag $repo_url:$CODE_BRANCH.$BUILD_NUMBER $repo_url:latest
                docker push $repo_url:latest

				'''

			}

 		}

  	}

  	stage('Update Deployment Manifest'){

 		steps {
 			
			script {
                if (params.UpdateDeploymentVersion) {
                    writeDeployment(
                        version: "${env.CODE_BRANCH}.${BUILD_NUMBER}",
                        image:  "${env.CODE_BRANCH}.${BUILD_NUMBER}",
                        service: "${env.SERVICE}",
                        deploymentFile: "${env.PROJECT}-deployments/deployments.yaml",
                        deploymentRepoUrl: "https://github.com/CBIIT/${env.DEPLOY_REPO}",
                        deploymentCheckoutDirectory: "${env.PROJECT}-deployments"
                    )
                }
            }

 		}

  	}

  	stage('Update Code Tag'){

 		steps {
 			
			script {

                tagRepo ( 
                    gitTag: "${env.CODE_BRANCH}",
                    gitUrl: "github.com/CBIIT/${env.CODE_REPO}",
                    checkoutDirectory: "${env.PROJECT}-${env.SERVICE}"
                )

            }

 		}

  	}

  }

  post {

    success {

		script {
			if (params.RunDeployStage) {
				echo 'Run the deployment for this sevice'
				build job: "$JOB_PATH/$DEPLOY_JOB", parameters: [string(name: 'ImageTag', value: "$CODE_BRANCH.$BUILD_NUMBER"), extendedChoice(name: 'Environment', value: "${params.Environment}")]
			}
		}
    }

    always {

        notify(
            secretPath: "notification/slack",
            secretName: "${env.SLACK_SECRET}"
        ) 

    }

    cleanup {

        cleanWs()

    }

  }

}