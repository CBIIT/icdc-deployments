@Library('datacommons-jenkins-shared-library@v1.1') _

pipeline {
	agent {
		node {
			//label 'icdc-docker'
            label 'slave-ncias-d2940-c'
		}
	}

	parameters {

        string(
	        defaultValue: '',
		    description: 'The image tag to deploy',
		    name: 'FrontendTag')

		extendedChoice(
            name: 'Environment',
            defaultValue: 'dev',
            description: 'Choose the environment to build',
            type: 'PT_SINGLE_SELECT',
            value: 'dev,qa,stage,prod')

  }

  options {
  	ansiColor('xterm')
	timestamps()
  }

  environment {

      PROJECT    = 'icdc'
	  CLUSTER      = "${env.PROJECT}-${params.Environment}-ecs" 
	  SERVICE      = "${env.PROJECT}-${params.Environment}-frontend"
	  REGION       = "us-east-1"

  }

  stages{
  	stage('checkout'){
  		steps {

  		checkout([$class: 'GitSCM',
			branches: [[name: '*/main']],
			doGenerateSubmoduleConfigurations: false,
			extensions: [[$class: 'RelativeTargetDirectory',
			relativeTargetDir: "playbooks"]],
			submoduleCfg: [],
			userRemoteConfigs:
			[[url: 'https://github.com/CBIIT/icdc-deployments']]])

        checkout([$class: 'GitSCM',
			branches: [[name: "${params.Environment}"]],
			doGenerateSubmoduleConfigurations: false,
			extensions: [[$class: 'RelativeTargetDirectory',
			relativeTargetDir: "${env.PROJECT}-deployments"]],
			submoduleCfg: [],
			userRemoteConfigs:
			[[url: 'https://github.com/CBIIT/icdc-deployments']]])

        }

  	}

  	stage('Deploy'){
		agent {
            docker {
                //image 'cbiitssrepo/cicd-ansible-7.0:latest'
				image 'jenkins/inbound-agent:latest-jdk11'
                args '--net=host -u root -v /var/run/docker.sock:/var/run/docker.sock'
                reuseNode true
            }
        }

	    environment {
            FE_VERSION = "${params.FrontendTag}"
            BE_VERSION = getVersion(service: "backend",deploymentFile: "${PROJECT}-deployments/deployments.yaml")
        }

 		steps {

			script {

			    sh label: 'Add-Ansible', script: '''#!/bin/bash

                # install ansible
				   apt-get update && apt-get install -y jq python3 python3-pip \
			         && /usr/bin/pip3 install --break-system-packages pip -U && /usr/bin/pip3 install --break-system-packages ansible==8.0.0 awscli jmespath docker boto botocore boto3 \
			         && ansible-galaxy  collection install amazon.aws \
			         && mkdir -p /var/cert \
			         && apt-get clean

				'''

			}
			
			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
                ansiblePlaybook(
					playbook: "${WORKSPACE}/playbooks/ansible/playbooks/deploy-frontend-microservice.yml", 
            		inventory: "${WORKSPACE}/playbooks/ansible/playbooks/hosts",
                    extraVars: [
                        tier: "${params.Environment}",
						project_name: "${PROJECT}",
						iam_prefix: "power-user",
						subdomain: "caninecommons",
						domain_name: "cancer.gov",
						auth_enabled: true
						],
                    colorized: true)
 			}

 		}

  	}

	stage('verify deployment'){

		steps {

 			script {

			    sh label: 'Verify-Deploy', script: '''#!/bin/bash

                # wait untiil the service is stable
				aws ecs wait services-stable --cluster $CLUSTER --region $REGION --service $SERVICE

				'''

			}

 		}

  	}

  }

  post {

    always {

        notify(
            secretPath: "notification/slack",
            secretName: "icdc_slack_url"
        ) 

    }

    cleanup {

        cleanWs()

    }

  }

}